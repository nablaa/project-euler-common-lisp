(defun solve ()
  (max-product-of-all-subsequences (number-to-digits (sample)) 5))

(defun sample ()


(defun number-to-digits (n)
  (if (< n 10)
    (list n)
    (cons (mod n 10) (number-to-digits (truncate n 10)))))

(defun max-product-of-all-subsequences (elems len)
  (reduce #'max (max-products-of-all-subsequences elems len)))

(defun max-products-of-all-subsequences (elems len)
  (mapcar #'(lambda (x) (max-product-of-subsequences x len)) (all-subsequences elems len)))

(defun all-subsequences (elems len)
  (loop :for i :from 0 :below len :collect (nthcdr i elems)))

(defun max-product-of-subsequences (elems len)
  (max-product-of-lists (split-list elems len)))

(defun max-product-of-lists (lists)
  (reduce #'max (mapcar #'(lambda (x) (apply #'* x)) lists)))

(defun split-list (elems len)
  (if (<= (length elems) len)
    (list elems)
    (let ((part (butlast elems (- (length elems) len)))
          (rest (nthcdr len elems)))
      (cons part (split-list rest len)))))
